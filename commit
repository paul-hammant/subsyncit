#!/usr/bin/env python3

'''

This script is not used by Subsyncit itself.

It is used when I check in Subsyncit so that there's a version number in the
source file. This is relevant as Python is a language that leaps into being
based on source files (unlike Java an its .class files), and I wanted to
have a version number in there just in case I'm supporting something.

'''
import hashlib
from datetime import datetime
import sh
import sys

import subprocess

x = sys.argv

changeset = sh.git("status")

changes_to_be_committed = False
changes_not_staged_for_commit = False
subsyncit_modified = False

for line in changeset.splitlines():

    if line == "Changes to be committed:":
        changes_to_be_committed = True

    if line == "Changes not staged for commit:":
        changes_not_staged_for_commit = True

    if "modified:   subsyncit.py" in line:
        if changes_not_staged_for_commit and sys.argv[1] != "-am":
            print("subsyncit.py modified, but you need to git-add it. Not committing")
            exit(1)
        subsyncit_modified = True

print ("subsyncit_modified " + str(subsyncit_modified))
print ("changes_to_be_committed " + str(changes_to_be_committed))

if subsyncit_modified and changes_to_be_committed:

    with open("subsyncit.py", 'r') as f:
        get_all = f.readlines()

    for_sha = ""
    for line in get_all:
        if "# Version" not in line:
            for_sha += line + "\n"
    hash = hashlib.sha1(for_sha).hexdigest()

    print("hash: " + hash)

    with open("subsyncit.py", 'r') as f:
        get_all = f.readlines()

    newlines = []
    for i, line in enumerate(get_all):
        if i == 4:
            newlines.append("# Version: " + str(datetime.utcnow()).replace("-",".").replace(":",".").replace(" ",".") + hash + "\n")
        else:
            newlines.append(line)

    with open("subsyncit.py", 'w') as f:
        f.writelines(newlines)

    sh.git("add", "subsyncit.py")

subprocess.call(["git", "commit"] + sys.argv[1:])

